# MiniShell-C

A simple custom Unix shell implemented in C, supporting both interactive and batch modes. `MiniShell-C` provides core features of typical shells including command execution, I/O redirection, pipelines, wildcards, and built-in commands.

---

## 🧾 Overview

- Written in C
- Supports **interactive mode** (user input) and **batch mode** (script input)
- Handles built-in and external commands
- Implements features like:
  - Redirection (`<`, `>`)
  - Single pipeline (`|`)
  - Wildcard expansion (`*`)
  - Error detection and handling

---

## ⚙️ Features

### ✅ Built-in Commands
- `cd [dir]` – Change current directory
- `pwd` – Print working directory
- `which [program]` – Find path of an executable
- `exit` – Terminate the shell

### ✅ External Command Execution
- Supports both relative and absolute paths
- Uses `fork()` and `execv()` to launch processes

### ✅ Redirection
- `<` – Redirect input from file
- `>` – Redirect output to file
- Uses `open()` and `dup2()` under the hood

### ✅ Pipelining
- Supports one pipeline (`|`) between two commands
- Uses `pipe()` and multiple `fork()`s

### ✅ Wildcard Expansion
- Supports `*` expansion using `glob()`
- Matches filenames in the current directory

### ✅ Error Handling
- Invalid commands or arguments
- File I/O and redirection errors
- Improper pipeline syntax
- Memory or exec failure

---

## 🧠 Code Architecture

### Token Representation
```c
typedef struct {
    char specialToken;   // '|', '<', '>', or 0 if normal
    char *normalToken;   // program or argument
} tokenType;
````

### Key Functions

| Function             | Description                                                 |
| -------------------- | ----------------------------------------------------------- |
| `determinMode()`     | Determines if shell is running interactively or via script  |
| `tokenize()`         | Splits input string into tokens, marking special characters |
| `readline()`         | Reads one line from input source                            |
| `findCommand()`      | Searches for command in `PATH`                              |
| `executeCommand()`   | Executes a program with optional redirection                |
| `handleCommand()`    | Parses, redirects, expands wildcards, and executes          |
| `isBuiltinCommand()` | Executes built-in commands                                  |
| `handleLine()`       | Master function: parses and dispatches each input line      |

---

## 🏗 Compilation & Usage

### Build

```bash
make
```

### Run in interactive mode

```bash
./mysh
```

### Run in batch mode

```bash
./mysh script.txt
```

---

## 🧪 Test Case Highlights

### 🔹 test\_basic\_commands.sh

* Validates basic external commands like `echo`, `ls`, etc.

### 🔹 test\_builtin\_commands.sh

* `pwd`, `cd`, `which`, and `exit`

### 🔹 test\_pipe.sh

* `echo "..." | grep`
* `ls | wc`

### 🔹 test\_wildcard.sh

* `ls *.txt`
* `cat test_*.sh`

### 🔹 test\_redirection.sh

* `cat < input.txt > output.txt`
* `sort < unsorted.txt > sorted.txt`

---

## 📌 Design Summary

* Process creation: `fork()` + `execv()`
* Redirection: `open()` + `dup2()`
* Piping: `pipe()` + multiple child processes
* Wildcards: handled via `glob()` from `<glob.h>`
* Parsing: handles whitespace, special symbols, and errors robustly

---

This project showcases key systems programming concepts in Unix, including process management, shell scripting, file descriptor manipulation, and command parsing. It serves as a solid foundation for building more advanced shells or command interpreters.

